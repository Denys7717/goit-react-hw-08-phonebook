{"version":3,"file":"static/js/489.654b7eb5.chunk.js","mappings":"kMACA,EAA8B,iCAA9B,EAAqE,yB,oBCMxDA,GAA2BC,E,QAAAA,IACtC,CAN8B,SAAAC,GAC9B,OAAOA,EAAMC,SAASA,QACxB,EAC8B,SAAAD,GAAK,OAAIA,EAAMC,SAASC,MAAO,IAI3D,SAACD,EAAUC,GAAM,OACfD,EACIA,EAASC,QAAO,SAAAC,GAAO,OACrBA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,IAE3DJ,CAAQ,I,SC6ChB,EArDoB,WAClB,IAAMM,GAAWC,EAAAA,EAAAA,MACXP,GAAWQ,EAAAA,EAAAA,IAAYX,GAEvBY,GAASC,EAAAA,EAAAA,MACTC,GAAWD,EAAAA,EAAAA,MAmBjB,OACEE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAiBC,SAnBjB,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACbnB,EAAOkB,EAAKlB,KAAKoB,MACjBC,EAASH,EAAKG,OAAOD,MAEzBvB,EAASyB,MACP,SAAAC,GAAO,OAAUA,EAAdvB,KAA8BC,gBAAkBD,EAAKC,aAAa,IAGvEuB,MAAM,GAADC,OAAIzB,EAAI,8BAGfG,GAASuB,EAAAA,EAAAA,IAAW,CAAE1B,KAAAA,EAAMqB,OAAAA,KAC5BH,EAAKS,QACP,EAI6DhB,SAAA,EACvDF,EAAAA,EAAAA,KAAA,SAAOmB,QAAStB,EAAOK,SAAC,UACxBF,EAAAA,EAAAA,KAAA,SACEoB,KAAK,OACLC,GAAIxB,EACJN,KAAK,OACL+B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEVxB,EAAAA,EAAAA,KAAA,SAAOmB,QAASpB,EAASG,SAAC,YAC1BF,EAAAA,EAAAA,KAAA,SACEqB,GAAItB,EACJqB,KAAK,MACL7B,KAAK,SACL+B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEVxB,EAAAA,EAAAA,KAAA,UAAQoB,KAAK,SAAShB,UAAWC,EAAQH,SAAC,oBAMlD,E,sHCxCe,SAASuB,EAAeX,GAAqC,IAADY,EAAAZ,EAAjCxB,QAAWC,EAAImC,EAAJnC,KAAMqB,EAAMc,EAANd,OAAQS,EAAEK,EAAFL,GACjEM,GAAoCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAChCI,GAAgCL,EAAAA,EAAAA,UAASrC,GAAK2C,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAoCT,EAAAA,EAAAA,UAAShB,GAAO0B,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA7CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAC1BlD,GAAWQ,EAAAA,EAAAA,IAAYX,GAEvBS,GAAWC,EAAAA,EAAAA,OAKjB8C,EAAAA,EAAAA,YAAU,WACHV,GAAexC,IAAS4C,GAAYvB,IAAW2B,GAClD7C,GACEgD,EAAAA,EAAAA,IAAmB,CACjBrB,GAAAA,EACA9B,KAAM4C,EACNvB,OAAQ2B,IAIhB,GAAG,CAACR,EAAYrC,EAAUyC,EAAUI,EAAYlB,EAAI9B,EAAMqB,EAAQxB,IAElE,IAAMuD,EAAe,SAAHC,GAAoB,IAAdlC,EAAMkC,EAANlC,OACF,aAAhBA,EAAOnB,KAIXiD,EAAc9B,EAAOC,OAHnByB,EAAY1B,EAAOC,MAIvB,EACA,OACEX,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAC0C,EAAAA,EAAI,CAAA3C,SAAA,CACF6B,GACC5B,EAAAA,EAAAA,MAAC2C,EAAAA,EAAW,CAAA5C,SAAA,EACVF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAS,CACR1B,GAAG,iBACH2B,MAAM,WACNC,QAAQ,WACRC,SAAUP,EACVvB,KAAK,OACL7B,KAAK,WACLoB,MAAOwB,KAETnC,EAAAA,EAAAA,KAAC+C,EAAAA,EAAS,CACR1B,GAAG,iBACH2B,MAAM,WACNC,QAAQ,WACRC,SAAUP,EACVvB,KAAK,OACL7B,KAAK,YACLoB,MAAO4B,QAIXpC,EAAAA,EAAAA,MAAC2C,EAAAA,EAAW,CAAA5C,SAAA,EACVF,EAAAA,EAAAA,KAACmD,EAAAA,EAAU,CAACF,QAAQ,YAAW/C,SAAEX,KACjCY,EAAAA,EAAAA,MAACgD,EAAAA,EAAU,CAACF,QAAQ,YAAW/C,SAAA,CAAC,IAAEU,MAClCZ,EAAAA,EAAAA,KAAA,OACEoD,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLnD,UAAU,8BACVoD,QAAQ,YAAWtD,UAEnBF,EAAAA,EAAAA,KAAA,QAAMyD,EAAE,seAIdtD,EAAAA,EAAAA,MAACuD,EAAAA,EAAW,CAAAxD,SAAA,EACVF,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CAACC,KAAK,QAAQxC,KAAK,SAASyC,QA/DxB,WACjB7B,GAAc,SAAA8B,GAAI,OAAKA,CAAI,GAC7B,EA6D+D5D,SACpD6B,GAAa/B,EAAAA,EAAAA,KAAC+D,EAAAA,EAAQ,KAAM/D,EAAAA,EAAAA,KAACgE,EAAAA,EAAQ,OAExChE,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CACLC,KAAK,QACLxC,KAAK,SACLyC,QAAS,kBAAMnE,GAASuE,EAAAA,EAAAA,IAAc5C,GAAI,EAACnB,UAE3CF,EAAAA,EAAAA,KAACkE,EAAAA,EAAiB,aAM9B,CC/FA,IA4BA,EA5BoB,WAClB,IAAM9E,GAAWQ,EAAAA,EAAAA,IAAYX,GACvBS,GAAWC,EAAAA,EAAAA,MAMjB,OAJA8C,EAAAA,EAAAA,YAAU,YACPrD,GAAYM,GAASyE,EAAAA,EAAAA,MACxB,GAAG,CAACzE,EAAUN,KAGZY,EAAAA,EAAAA,KAAA,OAAKI,UAAU,YAAWF,UACxBF,EAAAA,EAAAA,KAACoE,EAAAA,GAAI,CACHC,WAAS,EACTC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GACtBC,QAAS,CAAEF,GAAI,EAAGG,GAAI,EAAGF,GAAI,IAC7BG,eAAe,SACfC,WAAW,SAAQ1E,SAElBd,GACCA,EAASyF,KAAI,SAAAvF,GAAO,OAClBU,EAAAA,EAAAA,KAACoE,EAAAA,GAAI,CAACU,MAAI,EAACP,GAAI,EAAGG,GAAI,EAAGF,GAAI,EAAoBO,SAAU,IAAI7E,UAC7DF,EAAAA,EAAAA,KAACyB,EAAe,CAAkBnC,QAASA,GAArBA,EAAQ+B,KADK/B,EAAQ+B,GAEtC,OAKnB,EChCA,EAA6B,2B,UCoB7B,EAhBe,WACb,IAAM2D,GAAWlF,EAAAA,EAAAA,MACXJ,GAAWC,EAAAA,EAAAA,MAMjB,OACEQ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAeH,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,SAAOmB,QAAS6D,EAAS9E,SAAC,2BAC1BF,EAAAA,EAAAA,KAAA,SAAOoB,KAAK,OAAO8B,SAPH,SAAA3C,GAClBb,GAASuF,EAAAA,EAAAA,IAAc1E,EAAMG,OAAOC,OACtC,EAK8CU,GAAI2D,MAGpD,EClBA,EAA4B,+BC0B5B,EAnBoB,WAClB,IAAMtF,GAAWC,EAAAA,EAAAA,MAKjB,OAJA8C,EAAAA,EAAAA,YAAU,WACR/C,GAASyE,EAAAA,EAAAA,MACX,GAAG,CAACzE,KAGFM,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAcH,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,eACJF,EAAAA,EAAAA,KAACkF,EAAW,KACZlF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,cACJF,EAAAA,EAAAA,KAACmF,EAAM,KACPnF,EAAAA,EAAAA,KAACoF,EAAW,QAIpB,C","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","store/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/ContactPage/ContactPage.module.css?b217","pages/ContactPage/ContactPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"btn\":\"ContactForm_btn__wll+u\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectorContacts = state => {\n  return state.contacts.contacts;\n};\nexport const selectorFilter = state => state.contacts.filter;\n\nexport const selectorFilteredProducts = createSelector(\n  [selectorContacts, selectorFilter],\n  (contacts, filter) =>\n    contacts\n      ? contacts.filter(contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase())\n        )\n      : contacts\n);\n","import { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'store/contacts/contactsThunks';\nimport { selectorFilteredProducts } from 'store/contacts/contactsSelectors';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectorFilteredProducts);\n\n  const idName = nanoid();\n  const idNumber = nanoid();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const name = form.name.value;\n    const number = form.number.value;\n    if (\n      contacts.find(\n        ({ name: nameCont }) => nameCont.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <>\n      <form className={css.contactForm} onSubmit={handleSubmit}>\n        <label htmlFor={idName}>Name</label>\n        <input\n          type=\"text\"\n          id={idName}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <label htmlFor={idNumber}>Number</label>\n        <input\n          id={idNumber}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button type=\"submit\" className={css.btn}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectorFilteredProducts } from 'store/contacts/contactsSelectors';\nimport { deleteContact } from 'store/contacts/contactsThunks';\nimport { updateContactThunk } from 'store/contacts/contactsThunks';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport EditIcon from '@mui/icons-material/Edit';\nimport SaveIcon from '@mui/icons-material/Save';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  TextField,\n  Typography,\n} from '@mui/material';\n\nexport default function ContactListItem({ contact: { name, number, id } }) {\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [editName, setEditName] = useState(name);\n  const [editNumber, setEditNumber] = useState(number);\n  const contacts = useSelector(selectorFilteredProducts);\n\n  const dispatch = useDispatch();\n\n  const handleEdit = () => {\n    setIsEditMode(prev => !prev);\n  };\n  useEffect(() => {\n    if (!isEditMode && (name !== editName || number !== editNumber)) {\n      dispatch(\n        updateContactThunk({\n          id,\n          name: editName,\n          number: editNumber,\n        })\n      );\n    }\n  }, [isEditMode, dispatch, editName, editNumber, id, name, number, contacts]);\n\n  const handleChange = ({ target }) => {\n    if (target.name === 'editName') {\n      setEditName(target.value);\n      return;\n    }\n    setEditNumber(target.value);\n  };\n  return (\n    <>\n      <Card>\n        {isEditMode ? (\n          <CardContent>\n            <TextField\n              id=\"standard-basic\"\n              label=\"Standard\"\n              variant=\"standard\"\n              onChange={handleChange}\n              type=\"text\"\n              name=\"editName\"\n              value={editName}\n            ></TextField>\n            <TextField\n              id=\"standard-basic\"\n              label=\"Standard\"\n              variant=\"standard\"\n              onChange={handleChange}\n              type=\"text\"\n              name=\"editPhone\"\n              value={editNumber}\n            ></TextField>\n          </CardContent>\n        ) : (\n          <CardContent>\n            <Typography variant=\"subtitle1\">{name}</Typography>\n            <Typography variant=\"subtitle1\"> {number}</Typography>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"50\"\n              height=\"50\"\n              fill=\"currentColor\"\n              className=\"bi bi-emoji-sunglasses-fill\"\n              viewBox=\"0 0 16 16\"\n            >\n              <path d=\"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM2.31 5.243A1 1 0 0 1 3.28 4H6a1 1 0 0 1 1 1v.116A4.22 4.22 0 0 1 8 5c.35 0 .69.04 1 .116V5a1 1 0 0 1 1-1h2.72a1 1 0 0 1 .97 1.243l-.311 1.242A2 2 0 0 1 11.439 8H11a2 2 0 0 1-1.994-1.839A2.99 2.99 0 0 0 8 6c-.393 0-.74.064-1.006.161A2 2 0 0 1 5 8h-.438a2 2 0 0 1-1.94-1.515L2.31 5.243zM4.969 9.75A3.498 3.498 0 0 0 8 11.5a3.498 3.498 0 0 0 3.032-1.75.5.5 0 1 1 .866.5A4.498 4.498 0 0 1 8 12.5a4.498 4.498 0 0 1-3.898-2.25.5.5 0 0 1 .866-.5z\" />\n            </svg>\n          </CardContent>\n        )}\n        <CardActions>\n          <Button size=\"small\" type=\"button\" onClick={handleEdit}>\n            {isEditMode ? <SaveIcon /> : <EditIcon />}\n          </Button>\n          <Button\n            size=\"small\"\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            <DeleteForeverIcon />\n          </Button>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n","import { selectorFilteredProducts } from 'store/contacts/contactsSelectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllContacts } from 'store/contacts/contactsThunks';\nimport { useEffect } from 'react';\nimport { Grid } from '@mui/material';\nimport ContactListItem from 'components/ContactList/ContactListItem/ContactListItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectorFilteredProducts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    !contacts && dispatch(getAllContacts());\n  }, [dispatch, contacts]);\n\n  return (\n    <div className=\"container\">\n      <Grid\n        container\n        spacing={{ xs: 3, md: 2 }}\n        columns={{ xs: 2, sm: 8, md: 12 }}\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        {contacts &&\n          contacts.map(contact => (\n            <Grid item xs={2} sm={4} md={4} key={contact.id} maxWidth={100}>\n              <ContactListItem key={contact.id} contact={contact} />\n            </Grid>\n          ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterForm\":\"Filter_filterForm__+l+6Q\"};","import { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\nimport { filterContact } from 'store/contacts/contactsSlice';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n  const idFilter = nanoid();\n  const dispatch = useDispatch();\n\n  const findContact = event => {\n    dispatch(filterContact(event.target.value));\n  };\n\n  return (\n    <div className={css.filterForm}>\n      <label htmlFor={idFilter}>Find contacts by name</label>\n      <input type=\"text\" onChange={findContact} id={idFilter} />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactPage_container__p8wM4\"};","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport css from './ContactPage.module.css';\nimport { getAllContacts } from 'store/contacts/contactsThunks';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst ContactPage = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className={css.container}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    </>\n  );\n};\n\nexport default ContactPage;\n"],"names":["selectorFilteredProducts","createSelector","state","contacts","filter","contact","name","toLowerCase","includes","dispatch","useDispatch","useSelector","idName","nanoid","idNumber","_jsx","_Fragment","children","_jsxs","className","css","onSubmit","event","preventDefault","form","target","value","number","find","_ref","alert","concat","addContact","reset","htmlFor","type","id","pattern","title","required","ContactListItem","_ref$contact","_useState","useState","_useState2","_slicedToArray","isEditMode","setIsEditMode","_useState3","_useState4","editName","setEditName","_useState5","_useState6","editNumber","setEditNumber","useEffect","updateContactThunk","handleChange","_ref2","Card","CardContent","TextField","label","variant","onChange","Typography","xmlns","width","height","fill","viewBox","d","CardActions","Button","size","onClick","prev","SaveIcon","EditIcon","deleteContact","DeleteForeverIcon","getAllContacts","Grid","container","spacing","xs","md","columns","sm","justifyContent","alignItems","map","item","maxWidth","idFilter","filterContact","ContactForm","Filter","ContactList"],"sourceRoot":""}